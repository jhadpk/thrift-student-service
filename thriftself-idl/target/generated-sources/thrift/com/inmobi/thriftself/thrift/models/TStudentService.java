/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.inmobi.thriftself.thrift.models;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TStudentService {

  public interface Iface {

    public boolean insertStudent(com.inmobi.thriftself.thrift.models.TStudent studentToBeInserted) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException;

    public boolean updateStudent(com.inmobi.thriftself.thrift.models.TStudent studentToBeUpdated) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException;

    public com.inmobi.thriftself.thrift.models.TStudent fetchStudent(int studentIndex) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException;

    public boolean insertCourse(com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeInserted) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException;

    public boolean updateCourse(com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeUpdated) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException;

    public com.inmobi.thriftself.thrift.models.TStudentCourses fetchCourse(int courseIndex) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException;

    public List<com.inmobi.thriftself.thrift.models.TStudent> fetchStudents() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException;

    public List<com.inmobi.thriftself.thrift.models.TStudent> fetchStudentsByName(String name) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException;

    public List<com.inmobi.thriftself.thrift.models.TStudent> fetchStudentsByDepartment(String departmentName) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException;

    public List<com.inmobi.thriftself.thrift.models.TStudentCourses> fetchCourses() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException;

    public List<com.inmobi.thriftself.thrift.models.TStudentCourses> fetchCoursesByName(String name) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException;

    public List<com.inmobi.thriftself.thrift.models.TStudentCourses> fetchCoursesBySemester(int semester) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void insertStudent(com.inmobi.thriftself.thrift.models.TStudent studentToBeInserted, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.insertStudent_call> resultHandler) throws org.apache.thrift.TException;

    public void updateStudent(com.inmobi.thriftself.thrift.models.TStudent studentToBeUpdated, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateStudent_call> resultHandler) throws org.apache.thrift.TException;

    public void fetchStudent(int studentIndex, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fetchStudent_call> resultHandler) throws org.apache.thrift.TException;

    public void insertCourse(com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeInserted, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.insertCourse_call> resultHandler) throws org.apache.thrift.TException;

    public void updateCourse(com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeUpdated, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateCourse_call> resultHandler) throws org.apache.thrift.TException;

    public void fetchCourse(int courseIndex, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fetchCourse_call> resultHandler) throws org.apache.thrift.TException;

    public void fetchStudents(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fetchStudents_call> resultHandler) throws org.apache.thrift.TException;

    public void fetchStudentsByName(String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fetchStudentsByName_call> resultHandler) throws org.apache.thrift.TException;

    public void fetchStudentsByDepartment(String departmentName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fetchStudentsByDepartment_call> resultHandler) throws org.apache.thrift.TException;

    public void fetchCourses(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fetchCourses_call> resultHandler) throws org.apache.thrift.TException;

    public void fetchCoursesByName(String name, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fetchCoursesByName_call> resultHandler) throws org.apache.thrift.TException;

    public void fetchCoursesBySemester(int semester, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.fetchCoursesBySemester_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean insertStudent(com.inmobi.thriftself.thrift.models.TStudent studentToBeInserted) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      send_insertStudent(studentToBeInserted);
      return recv_insertStudent();
    }

    public void send_insertStudent(com.inmobi.thriftself.thrift.models.TStudent studentToBeInserted) throws org.apache.thrift.TException
    {
      insertStudent_args args = new insertStudent_args();
      args.setStudentToBeInserted(studentToBeInserted);
      sendBase("insertStudent", args);
    }

    public boolean recv_insertStudent() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      insertStudent_result result = new insertStudent_result();
      receiveBase(result, "insertStudent");
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertStudent failed: unknown result");
    }

    public boolean updateStudent(com.inmobi.thriftself.thrift.models.TStudent studentToBeUpdated) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      send_updateStudent(studentToBeUpdated);
      return recv_updateStudent();
    }

    public void send_updateStudent(com.inmobi.thriftself.thrift.models.TStudent studentToBeUpdated) throws org.apache.thrift.TException
    {
      updateStudent_args args = new updateStudent_args();
      args.setStudentToBeUpdated(studentToBeUpdated);
      sendBase("updateStudent", args);
    }

    public boolean recv_updateStudent() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      updateStudent_result result = new updateStudent_result();
      receiveBase(result, "updateStudent");
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateStudent failed: unknown result");
    }

    public com.inmobi.thriftself.thrift.models.TStudent fetchStudent(int studentIndex) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      send_fetchStudent(studentIndex);
      return recv_fetchStudent();
    }

    public void send_fetchStudent(int studentIndex) throws org.apache.thrift.TException
    {
      fetchStudent_args args = new fetchStudent_args();
      args.setStudentIndex(studentIndex);
      sendBase("fetchStudent", args);
    }

    public com.inmobi.thriftself.thrift.models.TStudent recv_fetchStudent() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      fetchStudent_result result = new fetchStudent_result();
      receiveBase(result, "fetchStudent");
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchStudent failed: unknown result");
    }

    public boolean insertCourse(com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeInserted) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      send_insertCourse(courseToBeInserted);
      return recv_insertCourse();
    }

    public void send_insertCourse(com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeInserted) throws org.apache.thrift.TException
    {
      insertCourse_args args = new insertCourse_args();
      args.setCourseToBeInserted(courseToBeInserted);
      sendBase("insertCourse", args);
    }

    public boolean recv_insertCourse() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      insertCourse_result result = new insertCourse_result();
      receiveBase(result, "insertCourse");
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertCourse failed: unknown result");
    }

    public boolean updateCourse(com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeUpdated) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      send_updateCourse(courseToBeUpdated);
      return recv_updateCourse();
    }

    public void send_updateCourse(com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeUpdated) throws org.apache.thrift.TException
    {
      updateCourse_args args = new updateCourse_args();
      args.setCourseToBeUpdated(courseToBeUpdated);
      sendBase("updateCourse", args);
    }

    public boolean recv_updateCourse() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      updateCourse_result result = new updateCourse_result();
      receiveBase(result, "updateCourse");
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCourse failed: unknown result");
    }

    public com.inmobi.thriftself.thrift.models.TStudentCourses fetchCourse(int courseIndex) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      send_fetchCourse(courseIndex);
      return recv_fetchCourse();
    }

    public void send_fetchCourse(int courseIndex) throws org.apache.thrift.TException
    {
      fetchCourse_args args = new fetchCourse_args();
      args.setCourseIndex(courseIndex);
      sendBase("fetchCourse", args);
    }

    public com.inmobi.thriftself.thrift.models.TStudentCourses recv_fetchCourse() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      fetchCourse_result result = new fetchCourse_result();
      receiveBase(result, "fetchCourse");
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchCourse failed: unknown result");
    }

    public List<com.inmobi.thriftself.thrift.models.TStudent> fetchStudents() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      send_fetchStudents();
      return recv_fetchStudents();
    }

    public void send_fetchStudents() throws org.apache.thrift.TException
    {
      fetchStudents_args args = new fetchStudents_args();
      sendBase("fetchStudents", args);
    }

    public List<com.inmobi.thriftself.thrift.models.TStudent> recv_fetchStudents() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      fetchStudents_result result = new fetchStudents_result();
      receiveBase(result, "fetchStudents");
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchStudents failed: unknown result");
    }

    public List<com.inmobi.thriftself.thrift.models.TStudent> fetchStudentsByName(String name) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      send_fetchStudentsByName(name);
      return recv_fetchStudentsByName();
    }

    public void send_fetchStudentsByName(String name) throws org.apache.thrift.TException
    {
      fetchStudentsByName_args args = new fetchStudentsByName_args();
      args.setName(name);
      sendBase("fetchStudentsByName", args);
    }

    public List<com.inmobi.thriftself.thrift.models.TStudent> recv_fetchStudentsByName() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      fetchStudentsByName_result result = new fetchStudentsByName_result();
      receiveBase(result, "fetchStudentsByName");
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchStudentsByName failed: unknown result");
    }

    public List<com.inmobi.thriftself.thrift.models.TStudent> fetchStudentsByDepartment(String departmentName) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      send_fetchStudentsByDepartment(departmentName);
      return recv_fetchStudentsByDepartment();
    }

    public void send_fetchStudentsByDepartment(String departmentName) throws org.apache.thrift.TException
    {
      fetchStudentsByDepartment_args args = new fetchStudentsByDepartment_args();
      args.setDepartmentName(departmentName);
      sendBase("fetchStudentsByDepartment", args);
    }

    public List<com.inmobi.thriftself.thrift.models.TStudent> recv_fetchStudentsByDepartment() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      fetchStudentsByDepartment_result result = new fetchStudentsByDepartment_result();
      receiveBase(result, "fetchStudentsByDepartment");
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchStudentsByDepartment failed: unknown result");
    }

    public List<com.inmobi.thriftself.thrift.models.TStudentCourses> fetchCourses() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      send_fetchCourses();
      return recv_fetchCourses();
    }

    public void send_fetchCourses() throws org.apache.thrift.TException
    {
      fetchCourses_args args = new fetchCourses_args();
      sendBase("fetchCourses", args);
    }

    public List<com.inmobi.thriftself.thrift.models.TStudentCourses> recv_fetchCourses() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      fetchCourses_result result = new fetchCourses_result();
      receiveBase(result, "fetchCourses");
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchCourses failed: unknown result");
    }

    public List<com.inmobi.thriftself.thrift.models.TStudentCourses> fetchCoursesByName(String name) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      send_fetchCoursesByName(name);
      return recv_fetchCoursesByName();
    }

    public void send_fetchCoursesByName(String name) throws org.apache.thrift.TException
    {
      fetchCoursesByName_args args = new fetchCoursesByName_args();
      args.setName(name);
      sendBase("fetchCoursesByName", args);
    }

    public List<com.inmobi.thriftself.thrift.models.TStudentCourses> recv_fetchCoursesByName() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      fetchCoursesByName_result result = new fetchCoursesByName_result();
      receiveBase(result, "fetchCoursesByName");
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchCoursesByName failed: unknown result");
    }

    public List<com.inmobi.thriftself.thrift.models.TStudentCourses> fetchCoursesBySemester(int semester) throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      send_fetchCoursesBySemester(semester);
      return recv_fetchCoursesBySemester();
    }

    public void send_fetchCoursesBySemester(int semester) throws org.apache.thrift.TException
    {
      fetchCoursesBySemester_args args = new fetchCoursesBySemester_args();
      args.setSemester(semester);
      sendBase("fetchCoursesBySemester", args);
    }

    public List<com.inmobi.thriftself.thrift.models.TStudentCourses> recv_fetchCoursesBySemester() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException
    {
      fetchCoursesBySemester_result result = new fetchCoursesBySemester_result();
      receiveBase(result, "fetchCoursesBySemester");
      if (result.ise != null) {
        throw result.ise;
      }
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchCoursesBySemester failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void insertStudent(com.inmobi.thriftself.thrift.models.TStudent studentToBeInserted, org.apache.thrift.async.AsyncMethodCallback<insertStudent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertStudent_call method_call = new insertStudent_call(studentToBeInserted, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertStudent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.inmobi.thriftself.thrift.models.TStudent studentToBeInserted;
      public insertStudent_call(com.inmobi.thriftself.thrift.models.TStudent studentToBeInserted, org.apache.thrift.async.AsyncMethodCallback<insertStudent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.studentToBeInserted = studentToBeInserted;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertStudent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertStudent_args args = new insertStudent_args();
        args.setStudentToBeInserted(studentToBeInserted);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertStudent();
      }
    }

    public void updateStudent(com.inmobi.thriftself.thrift.models.TStudent studentToBeUpdated, org.apache.thrift.async.AsyncMethodCallback<updateStudent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateStudent_call method_call = new updateStudent_call(studentToBeUpdated, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStudent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.inmobi.thriftself.thrift.models.TStudent studentToBeUpdated;
      public updateStudent_call(com.inmobi.thriftself.thrift.models.TStudent studentToBeUpdated, org.apache.thrift.async.AsyncMethodCallback<updateStudent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.studentToBeUpdated = studentToBeUpdated;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStudent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStudent_args args = new updateStudent_args();
        args.setStudentToBeUpdated(studentToBeUpdated);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateStudent();
      }
    }

    public void fetchStudent(int studentIndex, org.apache.thrift.async.AsyncMethodCallback<fetchStudent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchStudent_call method_call = new fetchStudent_call(studentIndex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchStudent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int studentIndex;
      public fetchStudent_call(int studentIndex, org.apache.thrift.async.AsyncMethodCallback<fetchStudent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.studentIndex = studentIndex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchStudent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchStudent_args args = new fetchStudent_args();
        args.setStudentIndex(studentIndex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.inmobi.thriftself.thrift.models.TStudent getResult() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchStudent();
      }
    }

    public void insertCourse(com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeInserted, org.apache.thrift.async.AsyncMethodCallback<insertCourse_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertCourse_call method_call = new insertCourse_call(courseToBeInserted, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertCourse_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeInserted;
      public insertCourse_call(com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeInserted, org.apache.thrift.async.AsyncMethodCallback<insertCourse_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseToBeInserted = courseToBeInserted;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertCourse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertCourse_args args = new insertCourse_args();
        args.setCourseToBeInserted(courseToBeInserted);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertCourse();
      }
    }

    public void updateCourse(com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeUpdated, org.apache.thrift.async.AsyncMethodCallback<updateCourse_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCourse_call method_call = new updateCourse_call(courseToBeUpdated, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCourse_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeUpdated;
      public updateCourse_call(com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeUpdated, org.apache.thrift.async.AsyncMethodCallback<updateCourse_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseToBeUpdated = courseToBeUpdated;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCourse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCourse_args args = new updateCourse_args();
        args.setCourseToBeUpdated(courseToBeUpdated);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCourse();
      }
    }

    public void fetchCourse(int courseIndex, org.apache.thrift.async.AsyncMethodCallback<fetchCourse_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchCourse_call method_call = new fetchCourse_call(courseIndex, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchCourse_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int courseIndex;
      public fetchCourse_call(int courseIndex, org.apache.thrift.async.AsyncMethodCallback<fetchCourse_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseIndex = courseIndex;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchCourse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchCourse_args args = new fetchCourse_args();
        args.setCourseIndex(courseIndex);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.inmobi.thriftself.thrift.models.TStudentCourses getResult() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchCourse();
      }
    }

    public void fetchStudents(org.apache.thrift.async.AsyncMethodCallback<fetchStudents_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchStudents_call method_call = new fetchStudents_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchStudents_call extends org.apache.thrift.async.TAsyncMethodCall {
      public fetchStudents_call(org.apache.thrift.async.AsyncMethodCallback<fetchStudents_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchStudents", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchStudents_args args = new fetchStudents_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.inmobi.thriftself.thrift.models.TStudent> getResult() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchStudents();
      }
    }

    public void fetchStudentsByName(String name, org.apache.thrift.async.AsyncMethodCallback<fetchStudentsByName_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchStudentsByName_call method_call = new fetchStudentsByName_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchStudentsByName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public fetchStudentsByName_call(String name, org.apache.thrift.async.AsyncMethodCallback<fetchStudentsByName_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchStudentsByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchStudentsByName_args args = new fetchStudentsByName_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.inmobi.thriftself.thrift.models.TStudent> getResult() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchStudentsByName();
      }
    }

    public void fetchStudentsByDepartment(String departmentName, org.apache.thrift.async.AsyncMethodCallback<fetchStudentsByDepartment_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchStudentsByDepartment_call method_call = new fetchStudentsByDepartment_call(departmentName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchStudentsByDepartment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String departmentName;
      public fetchStudentsByDepartment_call(String departmentName, org.apache.thrift.async.AsyncMethodCallback<fetchStudentsByDepartment_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.departmentName = departmentName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchStudentsByDepartment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchStudentsByDepartment_args args = new fetchStudentsByDepartment_args();
        args.setDepartmentName(departmentName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.inmobi.thriftself.thrift.models.TStudent> getResult() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchStudentsByDepartment();
      }
    }

    public void fetchCourses(org.apache.thrift.async.AsyncMethodCallback<fetchCourses_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchCourses_call method_call = new fetchCourses_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchCourses_call extends org.apache.thrift.async.TAsyncMethodCall {
      public fetchCourses_call(org.apache.thrift.async.AsyncMethodCallback<fetchCourses_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchCourses", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchCourses_args args = new fetchCourses_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.inmobi.thriftself.thrift.models.TStudentCourses> getResult() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchCourses();
      }
    }

    public void fetchCoursesByName(String name, org.apache.thrift.async.AsyncMethodCallback<fetchCoursesByName_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchCoursesByName_call method_call = new fetchCoursesByName_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchCoursesByName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String name;
      public fetchCoursesByName_call(String name, org.apache.thrift.async.AsyncMethodCallback<fetchCoursesByName_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchCoursesByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchCoursesByName_args args = new fetchCoursesByName_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.inmobi.thriftself.thrift.models.TStudentCourses> getResult() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchCoursesByName();
      }
    }

    public void fetchCoursesBySemester(int semester, org.apache.thrift.async.AsyncMethodCallback<fetchCoursesBySemester_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchCoursesBySemester_call method_call = new fetchCoursesBySemester_call(semester, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchCoursesBySemester_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int semester;
      public fetchCoursesBySemester_call(int semester, org.apache.thrift.async.AsyncMethodCallback<fetchCoursesBySemester_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.semester = semester;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchCoursesBySemester", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchCoursesBySemester_args args = new fetchCoursesBySemester_args();
        args.setSemester(semester);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.inmobi.thriftself.thrift.models.TStudentCourses> getResult() throws com.inmobi.thriftself.thrift.models.TInternalServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchCoursesBySemester();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("insertStudent", new insertStudent());
      processMap.put("updateStudent", new updateStudent());
      processMap.put("fetchStudent", new fetchStudent());
      processMap.put("insertCourse", new insertCourse());
      processMap.put("updateCourse", new updateCourse());
      processMap.put("fetchCourse", new fetchCourse());
      processMap.put("fetchStudents", new fetchStudents());
      processMap.put("fetchStudentsByName", new fetchStudentsByName());
      processMap.put("fetchStudentsByDepartment", new fetchStudentsByDepartment());
      processMap.put("fetchCourses", new fetchCourses());
      processMap.put("fetchCoursesByName", new fetchCoursesByName());
      processMap.put("fetchCoursesBySemester", new fetchCoursesBySemester());
      return processMap;
    }

    public static class insertStudent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertStudent_args> {
      public insertStudent() {
        super("insertStudent");
      }

      public insertStudent_args getEmptyArgsInstance() {
        return new insertStudent_args();
      }

      public insertStudent_result getResult(I iface, insertStudent_args args) throws org.apache.thrift.TException {
        insertStudent_result result = new insertStudent_result();
        try {
          result.success = iface.insertStudent(args.studentToBeInserted);
          result.setSuccessIsSet(true);
        } catch (com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class updateStudent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStudent_args> {
      public updateStudent() {
        super("updateStudent");
      }

      public updateStudent_args getEmptyArgsInstance() {
        return new updateStudent_args();
      }

      public updateStudent_result getResult(I iface, updateStudent_args args) throws org.apache.thrift.TException {
        updateStudent_result result = new updateStudent_result();
        try {
          result.success = iface.updateStudent(args.studentToBeUpdated);
          result.setSuccessIsSet(true);
        } catch (com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class fetchStudent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchStudent_args> {
      public fetchStudent() {
        super("fetchStudent");
      }

      public fetchStudent_args getEmptyArgsInstance() {
        return new fetchStudent_args();
      }

      public fetchStudent_result getResult(I iface, fetchStudent_args args) throws org.apache.thrift.TException {
        fetchStudent_result result = new fetchStudent_result();
        try {
          result.success = iface.fetchStudent(args.studentIndex);
        } catch (com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class insertCourse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertCourse_args> {
      public insertCourse() {
        super("insertCourse");
      }

      public insertCourse_args getEmptyArgsInstance() {
        return new insertCourse_args();
      }

      public insertCourse_result getResult(I iface, insertCourse_args args) throws org.apache.thrift.TException {
        insertCourse_result result = new insertCourse_result();
        try {
          result.success = iface.insertCourse(args.courseToBeInserted);
          result.setSuccessIsSet(true);
        } catch (com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class updateCourse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCourse_args> {
      public updateCourse() {
        super("updateCourse");
      }

      public updateCourse_args getEmptyArgsInstance() {
        return new updateCourse_args();
      }

      public updateCourse_result getResult(I iface, updateCourse_args args) throws org.apache.thrift.TException {
        updateCourse_result result = new updateCourse_result();
        try {
          result.success = iface.updateCourse(args.courseToBeUpdated);
          result.setSuccessIsSet(true);
        } catch (com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class fetchCourse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchCourse_args> {
      public fetchCourse() {
        super("fetchCourse");
      }

      public fetchCourse_args getEmptyArgsInstance() {
        return new fetchCourse_args();
      }

      public fetchCourse_result getResult(I iface, fetchCourse_args args) throws org.apache.thrift.TException {
        fetchCourse_result result = new fetchCourse_result();
        try {
          result.success = iface.fetchCourse(args.courseIndex);
        } catch (com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class fetchStudents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchStudents_args> {
      public fetchStudents() {
        super("fetchStudents");
      }

      public fetchStudents_args getEmptyArgsInstance() {
        return new fetchStudents_args();
      }

      public fetchStudents_result getResult(I iface, fetchStudents_args args) throws org.apache.thrift.TException {
        fetchStudents_result result = new fetchStudents_result();
        try {
          result.success = iface.fetchStudents();
        } catch (com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class fetchStudentsByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchStudentsByName_args> {
      public fetchStudentsByName() {
        super("fetchStudentsByName");
      }

      public fetchStudentsByName_args getEmptyArgsInstance() {
        return new fetchStudentsByName_args();
      }

      public fetchStudentsByName_result getResult(I iface, fetchStudentsByName_args args) throws org.apache.thrift.TException {
        fetchStudentsByName_result result = new fetchStudentsByName_result();
        try {
          result.success = iface.fetchStudentsByName(args.name);
        } catch (com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class fetchStudentsByDepartment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchStudentsByDepartment_args> {
      public fetchStudentsByDepartment() {
        super("fetchStudentsByDepartment");
      }

      public fetchStudentsByDepartment_args getEmptyArgsInstance() {
        return new fetchStudentsByDepartment_args();
      }

      public fetchStudentsByDepartment_result getResult(I iface, fetchStudentsByDepartment_args args) throws org.apache.thrift.TException {
        fetchStudentsByDepartment_result result = new fetchStudentsByDepartment_result();
        try {
          result.success = iface.fetchStudentsByDepartment(args.departmentName);
        } catch (com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class fetchCourses<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchCourses_args> {
      public fetchCourses() {
        super("fetchCourses");
      }

      public fetchCourses_args getEmptyArgsInstance() {
        return new fetchCourses_args();
      }

      public fetchCourses_result getResult(I iface, fetchCourses_args args) throws org.apache.thrift.TException {
        fetchCourses_result result = new fetchCourses_result();
        try {
          result.success = iface.fetchCourses();
        } catch (com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class fetchCoursesByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchCoursesByName_args> {
      public fetchCoursesByName() {
        super("fetchCoursesByName");
      }

      public fetchCoursesByName_args getEmptyArgsInstance() {
        return new fetchCoursesByName_args();
      }

      public fetchCoursesByName_result getResult(I iface, fetchCoursesByName_args args) throws org.apache.thrift.TException {
        fetchCoursesByName_result result = new fetchCoursesByName_result();
        try {
          result.success = iface.fetchCoursesByName(args.name);
        } catch (com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

    public static class fetchCoursesBySemester<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchCoursesBySemester_args> {
      public fetchCoursesBySemester() {
        super("fetchCoursesBySemester");
      }

      public fetchCoursesBySemester_args getEmptyArgsInstance() {
        return new fetchCoursesBySemester_args();
      }

      public fetchCoursesBySemester_result getResult(I iface, fetchCoursesBySemester_args args) throws org.apache.thrift.TException {
        fetchCoursesBySemester_result result = new fetchCoursesBySemester_result();
        try {
          result.success = iface.fetchCoursesBySemester(args.semester);
        } catch (com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
          result.ise = ise;
        }
        return result;
      }
    }

  }

  public static class insertStudent_args implements org.apache.thrift.TBase<insertStudent_args, insertStudent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertStudent_args");

    private static final org.apache.thrift.protocol.TField STUDENT_TO_BE_INSERTED_FIELD_DESC = new org.apache.thrift.protocol.TField("studentToBeInserted", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertStudent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertStudent_argsTupleSchemeFactory());
    }

    public com.inmobi.thriftself.thrift.models.TStudent studentToBeInserted; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_TO_BE_INSERTED((short)1, "studentToBeInserted");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_TO_BE_INSERTED
            return STUDENT_TO_BE_INSERTED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_TO_BE_INSERTED, new org.apache.thrift.meta_data.FieldMetaData("studentToBeInserted", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.inmobi.thriftself.thrift.models.TStudent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertStudent_args.class, metaDataMap);
    }

    public insertStudent_args() {
    }

    public insertStudent_args(
      com.inmobi.thriftself.thrift.models.TStudent studentToBeInserted)
    {
      this();
      this.studentToBeInserted = studentToBeInserted;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertStudent_args(insertStudent_args other) {
      if (other.isSetStudentToBeInserted()) {
        this.studentToBeInserted = new com.inmobi.thriftself.thrift.models.TStudent(other.studentToBeInserted);
      }
    }

    public insertStudent_args deepCopy() {
      return new insertStudent_args(this);
    }

    @Override
    public void clear() {
      this.studentToBeInserted = null;
    }

    public com.inmobi.thriftself.thrift.models.TStudent getStudentToBeInserted() {
      return this.studentToBeInserted;
    }

    public insertStudent_args setStudentToBeInserted(com.inmobi.thriftself.thrift.models.TStudent studentToBeInserted) {
      this.studentToBeInserted = studentToBeInserted;
      return this;
    }

    public void unsetStudentToBeInserted() {
      this.studentToBeInserted = null;
    }

    /** Returns true if field studentToBeInserted is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentToBeInserted() {
      return this.studentToBeInserted != null;
    }

    public void setStudentToBeInsertedIsSet(boolean value) {
      if (!value) {
        this.studentToBeInserted = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT_TO_BE_INSERTED:
        if (value == null) {
          unsetStudentToBeInserted();
        } else {
          setStudentToBeInserted((com.inmobi.thriftself.thrift.models.TStudent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_TO_BE_INSERTED:
        return getStudentToBeInserted();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_TO_BE_INSERTED:
        return isSetStudentToBeInserted();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertStudent_args)
        return this.equals((insertStudent_args)that);
      return false;
    }

    public boolean equals(insertStudent_args that) {
      if (that == null)
        return false;

      boolean this_present_studentToBeInserted = true && this.isSetStudentToBeInserted();
      boolean that_present_studentToBeInserted = true && that.isSetStudentToBeInserted();
      if (this_present_studentToBeInserted || that_present_studentToBeInserted) {
        if (!(this_present_studentToBeInserted && that_present_studentToBeInserted))
          return false;
        if (!this.studentToBeInserted.equals(that.studentToBeInserted))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(insertStudent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      insertStudent_args typedOther = (insertStudent_args)other;

      lastComparison = Boolean.valueOf(isSetStudentToBeInserted()).compareTo(typedOther.isSetStudentToBeInserted());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentToBeInserted()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentToBeInserted, typedOther.studentToBeInserted);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertStudent_args(");
      boolean first = true;

      sb.append("studentToBeInserted:");
      if (this.studentToBeInserted == null) {
        sb.append("null");
      } else {
        sb.append(this.studentToBeInserted);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (studentToBeInserted == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'studentToBeInserted' was not present! Struct: " + toString());
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertStudent_argsStandardSchemeFactory implements SchemeFactory {
      public insertStudent_argsStandardScheme getScheme() {
        return new insertStudent_argsStandardScheme();
      }
    }

    private static class insertStudent_argsStandardScheme extends StandardScheme<insertStudent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertStudent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_TO_BE_INSERTED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.studentToBeInserted = new com.inmobi.thriftself.thrift.models.TStudent();
                struct.studentToBeInserted.read(iprot);
                struct.setStudentToBeInsertedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertStudent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.studentToBeInserted != null) {
          oprot.writeFieldBegin(STUDENT_TO_BE_INSERTED_FIELD_DESC);
          struct.studentToBeInserted.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertStudent_argsTupleSchemeFactory implements SchemeFactory {
      public insertStudent_argsTupleScheme getScheme() {
        return new insertStudent_argsTupleScheme();
      }
    }

    private static class insertStudent_argsTupleScheme extends TupleScheme<insertStudent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.studentToBeInserted.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.studentToBeInserted = new com.inmobi.thriftself.thrift.models.TStudent();
        struct.studentToBeInserted.read(iprot);
        struct.setStudentToBeInsertedIsSet(true);
      }
    }

  }

  public static class insertStudent_result implements org.apache.thrift.TBase<insertStudent_result, insertStudent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertStudent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertStudent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertStudent_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public com.inmobi.thriftself.thrift.models.TInternalServerException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertStudent_result.class, metaDataMap);
    }

    public insertStudent_result() {
    }

    public insertStudent_result(
      boolean success,
      com.inmobi.thriftself.thrift.models.TInternalServerException ise)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertStudent_result(insertStudent_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetIse()) {
        this.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException(other.ise);
      }
    }

    public insertStudent_result deepCopy() {
      return new insertStudent_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ise = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public insertStudent_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public com.inmobi.thriftself.thrift.models.TInternalServerException getIse() {
      return this.ise;
    }

    public insertStudent_result setIse(com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((com.inmobi.thriftself.thrift.models.TInternalServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case ISE:
        return getIse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertStudent_result)
        return this.equals((insertStudent_result)that);
      return false;
    }

    public boolean equals(insertStudent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(insertStudent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      insertStudent_result typedOther = (insertStudent_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIse()).compareTo(typedOther.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, typedOther.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertStudent_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertStudent_resultStandardSchemeFactory implements SchemeFactory {
      public insertStudent_resultStandardScheme getScheme() {
        return new insertStudent_resultStandardScheme();
      }
    }

    private static class insertStudent_resultStandardScheme extends StandardScheme<insertStudent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertStudent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertStudent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertStudent_resultTupleSchemeFactory implements SchemeFactory {
      public insertStudent_resultTupleScheme getScheme() {
        return new insertStudent_resultTupleScheme();
      }
    }

    private static class insertStudent_resultTupleScheme extends TupleScheme<insertStudent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

  }

  public static class updateStudent_args implements org.apache.thrift.TBase<updateStudent_args, updateStudent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStudent_args");

    private static final org.apache.thrift.protocol.TField STUDENT_TO_BE_UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("studentToBeUpdated", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStudent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStudent_argsTupleSchemeFactory());
    }

    public com.inmobi.thriftself.thrift.models.TStudent studentToBeUpdated; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_TO_BE_UPDATED((short)1, "studentToBeUpdated");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_TO_BE_UPDATED
            return STUDENT_TO_BE_UPDATED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_TO_BE_UPDATED, new org.apache.thrift.meta_data.FieldMetaData("studentToBeUpdated", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.inmobi.thriftself.thrift.models.TStudent.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStudent_args.class, metaDataMap);
    }

    public updateStudent_args() {
    }

    public updateStudent_args(
      com.inmobi.thriftself.thrift.models.TStudent studentToBeUpdated)
    {
      this();
      this.studentToBeUpdated = studentToBeUpdated;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStudent_args(updateStudent_args other) {
      if (other.isSetStudentToBeUpdated()) {
        this.studentToBeUpdated = new com.inmobi.thriftself.thrift.models.TStudent(other.studentToBeUpdated);
      }
    }

    public updateStudent_args deepCopy() {
      return new updateStudent_args(this);
    }

    @Override
    public void clear() {
      this.studentToBeUpdated = null;
    }

    public com.inmobi.thriftself.thrift.models.TStudent getStudentToBeUpdated() {
      return this.studentToBeUpdated;
    }

    public updateStudent_args setStudentToBeUpdated(com.inmobi.thriftself.thrift.models.TStudent studentToBeUpdated) {
      this.studentToBeUpdated = studentToBeUpdated;
      return this;
    }

    public void unsetStudentToBeUpdated() {
      this.studentToBeUpdated = null;
    }

    /** Returns true if field studentToBeUpdated is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentToBeUpdated() {
      return this.studentToBeUpdated != null;
    }

    public void setStudentToBeUpdatedIsSet(boolean value) {
      if (!value) {
        this.studentToBeUpdated = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT_TO_BE_UPDATED:
        if (value == null) {
          unsetStudentToBeUpdated();
        } else {
          setStudentToBeUpdated((com.inmobi.thriftself.thrift.models.TStudent)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_TO_BE_UPDATED:
        return getStudentToBeUpdated();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_TO_BE_UPDATED:
        return isSetStudentToBeUpdated();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStudent_args)
        return this.equals((updateStudent_args)that);
      return false;
    }

    public boolean equals(updateStudent_args that) {
      if (that == null)
        return false;

      boolean this_present_studentToBeUpdated = true && this.isSetStudentToBeUpdated();
      boolean that_present_studentToBeUpdated = true && that.isSetStudentToBeUpdated();
      if (this_present_studentToBeUpdated || that_present_studentToBeUpdated) {
        if (!(this_present_studentToBeUpdated && that_present_studentToBeUpdated))
          return false;
        if (!this.studentToBeUpdated.equals(that.studentToBeUpdated))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateStudent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateStudent_args typedOther = (updateStudent_args)other;

      lastComparison = Boolean.valueOf(isSetStudentToBeUpdated()).compareTo(typedOther.isSetStudentToBeUpdated());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentToBeUpdated()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentToBeUpdated, typedOther.studentToBeUpdated);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStudent_args(");
      boolean first = true;

      sb.append("studentToBeUpdated:");
      if (this.studentToBeUpdated == null) {
        sb.append("null");
      } else {
        sb.append(this.studentToBeUpdated);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (studentToBeUpdated == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'studentToBeUpdated' was not present! Struct: " + toString());
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStudent_argsStandardSchemeFactory implements SchemeFactory {
      public updateStudent_argsStandardScheme getScheme() {
        return new updateStudent_argsStandardScheme();
      }
    }

    private static class updateStudent_argsStandardScheme extends StandardScheme<updateStudent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStudent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_TO_BE_UPDATED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.studentToBeUpdated = new com.inmobi.thriftself.thrift.models.TStudent();
                struct.studentToBeUpdated.read(iprot);
                struct.setStudentToBeUpdatedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStudent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.studentToBeUpdated != null) {
          oprot.writeFieldBegin(STUDENT_TO_BE_UPDATED_FIELD_DESC);
          struct.studentToBeUpdated.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStudent_argsTupleSchemeFactory implements SchemeFactory {
      public updateStudent_argsTupleScheme getScheme() {
        return new updateStudent_argsTupleScheme();
      }
    }

    private static class updateStudent_argsTupleScheme extends TupleScheme<updateStudent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.studentToBeUpdated.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.studentToBeUpdated = new com.inmobi.thriftself.thrift.models.TStudent();
        struct.studentToBeUpdated.read(iprot);
        struct.setStudentToBeUpdatedIsSet(true);
      }
    }

  }

  public static class updateStudent_result implements org.apache.thrift.TBase<updateStudent_result, updateStudent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStudent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStudent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStudent_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public com.inmobi.thriftself.thrift.models.TInternalServerException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStudent_result.class, metaDataMap);
    }

    public updateStudent_result() {
    }

    public updateStudent_result(
      boolean success,
      com.inmobi.thriftself.thrift.models.TInternalServerException ise)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStudent_result(updateStudent_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetIse()) {
        this.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException(other.ise);
      }
    }

    public updateStudent_result deepCopy() {
      return new updateStudent_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ise = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateStudent_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public com.inmobi.thriftself.thrift.models.TInternalServerException getIse() {
      return this.ise;
    }

    public updateStudent_result setIse(com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((com.inmobi.thriftself.thrift.models.TInternalServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case ISE:
        return getIse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStudent_result)
        return this.equals((updateStudent_result)that);
      return false;
    }

    public boolean equals(updateStudent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateStudent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateStudent_result typedOther = (updateStudent_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIse()).compareTo(typedOther.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, typedOther.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStudent_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStudent_resultStandardSchemeFactory implements SchemeFactory {
      public updateStudent_resultStandardScheme getScheme() {
        return new updateStudent_resultStandardScheme();
      }
    }

    private static class updateStudent_resultStandardScheme extends StandardScheme<updateStudent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStudent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStudent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStudent_resultTupleSchemeFactory implements SchemeFactory {
      public updateStudent_resultTupleScheme getScheme() {
        return new updateStudent_resultTupleScheme();
      }
    }

    private static class updateStudent_resultTupleScheme extends TupleScheme<updateStudent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

  }

  public static class fetchStudent_args implements org.apache.thrift.TBase<fetchStudent_args, fetchStudent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchStudent_args");

    private static final org.apache.thrift.protocol.TField STUDENT_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("studentIndex", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchStudent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchStudent_argsTupleSchemeFactory());
    }

    public int studentIndex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STUDENT_INDEX((short)1, "studentIndex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STUDENT_INDEX
            return STUDENT_INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STUDENTINDEX_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STUDENT_INDEX, new org.apache.thrift.meta_data.FieldMetaData("studentIndex", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchStudent_args.class, metaDataMap);
    }

    public fetchStudent_args() {
    }

    public fetchStudent_args(
      int studentIndex)
    {
      this();
      this.studentIndex = studentIndex;
      setStudentIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchStudent_args(fetchStudent_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.studentIndex = other.studentIndex;
    }

    public fetchStudent_args deepCopy() {
      return new fetchStudent_args(this);
    }

    @Override
    public void clear() {
      setStudentIndexIsSet(false);
      this.studentIndex = 0;
    }

    public int getStudentIndex() {
      return this.studentIndex;
    }

    public fetchStudent_args setStudentIndex(int studentIndex) {
      this.studentIndex = studentIndex;
      setStudentIndexIsSet(true);
      return this;
    }

    public void unsetStudentIndex() {
      __isset_bit_vector.clear(__STUDENTINDEX_ISSET_ID);
    }

    /** Returns true if field studentIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetStudentIndex() {
      return __isset_bit_vector.get(__STUDENTINDEX_ISSET_ID);
    }

    public void setStudentIndexIsSet(boolean value) {
      __isset_bit_vector.set(__STUDENTINDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STUDENT_INDEX:
        if (value == null) {
          unsetStudentIndex();
        } else {
          setStudentIndex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STUDENT_INDEX:
        return Integer.valueOf(getStudentIndex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STUDENT_INDEX:
        return isSetStudentIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchStudent_args)
        return this.equals((fetchStudent_args)that);
      return false;
    }

    public boolean equals(fetchStudent_args that) {
      if (that == null)
        return false;

      boolean this_present_studentIndex = true;
      boolean that_present_studentIndex = true;
      if (this_present_studentIndex || that_present_studentIndex) {
        if (!(this_present_studentIndex && that_present_studentIndex))
          return false;
        if (this.studentIndex != that.studentIndex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchStudent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchStudent_args typedOther = (fetchStudent_args)other;

      lastComparison = Boolean.valueOf(isSetStudentIndex()).compareTo(typedOther.isSetStudentIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStudentIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.studentIndex, typedOther.studentIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchStudent_args(");
      boolean first = true;

      sb.append("studentIndex:");
      sb.append(this.studentIndex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'studentIndex' because it's a primitive and you chose the non-beans generator.
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchStudent_argsStandardSchemeFactory implements SchemeFactory {
      public fetchStudent_argsStandardScheme getScheme() {
        return new fetchStudent_argsStandardScheme();
      }
    }

    private static class fetchStudent_argsStandardScheme extends StandardScheme<fetchStudent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchStudent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STUDENT_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.studentIndex = iprot.readI32();
                struct.setStudentIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetStudentIndex()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'studentIndex' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchStudent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(STUDENT_INDEX_FIELD_DESC);
        oprot.writeI32(struct.studentIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchStudent_argsTupleSchemeFactory implements SchemeFactory {
      public fetchStudent_argsTupleScheme getScheme() {
        return new fetchStudent_argsTupleScheme();
      }
    }

    private static class fetchStudent_argsTupleScheme extends TupleScheme<fetchStudent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI32(struct.studentIndex);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchStudent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.studentIndex = iprot.readI32();
        struct.setStudentIndexIsSet(true);
      }
    }

  }

  public static class fetchStudent_result implements org.apache.thrift.TBase<fetchStudent_result, fetchStudent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchStudent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchStudent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchStudent_resultTupleSchemeFactory());
    }

    public com.inmobi.thriftself.thrift.models.TStudent success; // required
    public com.inmobi.thriftself.thrift.models.TInternalServerException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.inmobi.thriftself.thrift.models.TStudent.class)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchStudent_result.class, metaDataMap);
    }

    public fetchStudent_result() {
    }

    public fetchStudent_result(
      com.inmobi.thriftself.thrift.models.TStudent success,
      com.inmobi.thriftself.thrift.models.TInternalServerException ise)
    {
      this();
      this.success = success;
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchStudent_result(fetchStudent_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.inmobi.thriftself.thrift.models.TStudent(other.success);
      }
      if (other.isSetIse()) {
        this.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException(other.ise);
      }
    }

    public fetchStudent_result deepCopy() {
      return new fetchStudent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ise = null;
    }

    public com.inmobi.thriftself.thrift.models.TStudent getSuccess() {
      return this.success;
    }

    public fetchStudent_result setSuccess(com.inmobi.thriftself.thrift.models.TStudent success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.inmobi.thriftself.thrift.models.TInternalServerException getIse() {
      return this.ise;
    }

    public fetchStudent_result setIse(com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.inmobi.thriftself.thrift.models.TStudent)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((com.inmobi.thriftself.thrift.models.TInternalServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ISE:
        return getIse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchStudent_result)
        return this.equals((fetchStudent_result)that);
      return false;
    }

    public boolean equals(fetchStudent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchStudent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchStudent_result typedOther = (fetchStudent_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIse()).compareTo(typedOther.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, typedOther.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchStudent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchStudent_resultStandardSchemeFactory implements SchemeFactory {
      public fetchStudent_resultStandardScheme getScheme() {
        return new fetchStudent_resultStandardScheme();
      }
    }

    private static class fetchStudent_resultStandardScheme extends StandardScheme<fetchStudent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchStudent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.inmobi.thriftself.thrift.models.TStudent();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchStudent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchStudent_resultTupleSchemeFactory implements SchemeFactory {
      public fetchStudent_resultTupleScheme getScheme() {
        return new fetchStudent_resultTupleScheme();
      }
    }

    private static class fetchStudent_resultTupleScheme extends TupleScheme<fetchStudent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchStudent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.inmobi.thriftself.thrift.models.TStudent();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

  }

  public static class insertCourse_args implements org.apache.thrift.TBase<insertCourse_args, insertCourse_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertCourse_args");

    private static final org.apache.thrift.protocol.TField COURSE_TO_BE_INSERTED_FIELD_DESC = new org.apache.thrift.protocol.TField("courseToBeInserted", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertCourse_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertCourse_argsTupleSchemeFactory());
    }

    public com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeInserted; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_TO_BE_INSERTED((short)1, "courseToBeInserted");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_TO_BE_INSERTED
            return COURSE_TO_BE_INSERTED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_TO_BE_INSERTED, new org.apache.thrift.meta_data.FieldMetaData("courseToBeInserted", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.inmobi.thriftself.thrift.models.TStudentCourses.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertCourse_args.class, metaDataMap);
    }

    public insertCourse_args() {
    }

    public insertCourse_args(
      com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeInserted)
    {
      this();
      this.courseToBeInserted = courseToBeInserted;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertCourse_args(insertCourse_args other) {
      if (other.isSetCourseToBeInserted()) {
        this.courseToBeInserted = new com.inmobi.thriftself.thrift.models.TStudentCourses(other.courseToBeInserted);
      }
    }

    public insertCourse_args deepCopy() {
      return new insertCourse_args(this);
    }

    @Override
    public void clear() {
      this.courseToBeInserted = null;
    }

    public com.inmobi.thriftself.thrift.models.TStudentCourses getCourseToBeInserted() {
      return this.courseToBeInserted;
    }

    public insertCourse_args setCourseToBeInserted(com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeInserted) {
      this.courseToBeInserted = courseToBeInserted;
      return this;
    }

    public void unsetCourseToBeInserted() {
      this.courseToBeInserted = null;
    }

    /** Returns true if field courseToBeInserted is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseToBeInserted() {
      return this.courseToBeInserted != null;
    }

    public void setCourseToBeInsertedIsSet(boolean value) {
      if (!value) {
        this.courseToBeInserted = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_TO_BE_INSERTED:
        if (value == null) {
          unsetCourseToBeInserted();
        } else {
          setCourseToBeInserted((com.inmobi.thriftself.thrift.models.TStudentCourses)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_TO_BE_INSERTED:
        return getCourseToBeInserted();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_TO_BE_INSERTED:
        return isSetCourseToBeInserted();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertCourse_args)
        return this.equals((insertCourse_args)that);
      return false;
    }

    public boolean equals(insertCourse_args that) {
      if (that == null)
        return false;

      boolean this_present_courseToBeInserted = true && this.isSetCourseToBeInserted();
      boolean that_present_courseToBeInserted = true && that.isSetCourseToBeInserted();
      if (this_present_courseToBeInserted || that_present_courseToBeInserted) {
        if (!(this_present_courseToBeInserted && that_present_courseToBeInserted))
          return false;
        if (!this.courseToBeInserted.equals(that.courseToBeInserted))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(insertCourse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      insertCourse_args typedOther = (insertCourse_args)other;

      lastComparison = Boolean.valueOf(isSetCourseToBeInserted()).compareTo(typedOther.isSetCourseToBeInserted());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseToBeInserted()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseToBeInserted, typedOther.courseToBeInserted);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertCourse_args(");
      boolean first = true;

      sb.append("courseToBeInserted:");
      if (this.courseToBeInserted == null) {
        sb.append("null");
      } else {
        sb.append(this.courseToBeInserted);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (courseToBeInserted == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'courseToBeInserted' was not present! Struct: " + toString());
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertCourse_argsStandardSchemeFactory implements SchemeFactory {
      public insertCourse_argsStandardScheme getScheme() {
        return new insertCourse_argsStandardScheme();
      }
    }

    private static class insertCourse_argsStandardScheme extends StandardScheme<insertCourse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_TO_BE_INSERTED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseToBeInserted = new com.inmobi.thriftself.thrift.models.TStudentCourses();
                struct.courseToBeInserted.read(iprot);
                struct.setCourseToBeInsertedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertCourse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseToBeInserted != null) {
          oprot.writeFieldBegin(COURSE_TO_BE_INSERTED_FIELD_DESC);
          struct.courseToBeInserted.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertCourse_argsTupleSchemeFactory implements SchemeFactory {
      public insertCourse_argsTupleScheme getScheme() {
        return new insertCourse_argsTupleScheme();
      }
    }

    private static class insertCourse_argsTupleScheme extends TupleScheme<insertCourse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.courseToBeInserted.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.courseToBeInserted = new com.inmobi.thriftself.thrift.models.TStudentCourses();
        struct.courseToBeInserted.read(iprot);
        struct.setCourseToBeInsertedIsSet(true);
      }
    }

  }

  public static class insertCourse_result implements org.apache.thrift.TBase<insertCourse_result, insertCourse_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertCourse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertCourse_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertCourse_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public com.inmobi.thriftself.thrift.models.TInternalServerException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertCourse_result.class, metaDataMap);
    }

    public insertCourse_result() {
    }

    public insertCourse_result(
      boolean success,
      com.inmobi.thriftself.thrift.models.TInternalServerException ise)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertCourse_result(insertCourse_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetIse()) {
        this.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException(other.ise);
      }
    }

    public insertCourse_result deepCopy() {
      return new insertCourse_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ise = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public insertCourse_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public com.inmobi.thriftself.thrift.models.TInternalServerException getIse() {
      return this.ise;
    }

    public insertCourse_result setIse(com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((com.inmobi.thriftself.thrift.models.TInternalServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case ISE:
        return getIse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertCourse_result)
        return this.equals((insertCourse_result)that);
      return false;
    }

    public boolean equals(insertCourse_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(insertCourse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      insertCourse_result typedOther = (insertCourse_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIse()).compareTo(typedOther.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, typedOther.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertCourse_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertCourse_resultStandardSchemeFactory implements SchemeFactory {
      public insertCourse_resultStandardScheme getScheme() {
        return new insertCourse_resultStandardScheme();
      }
    }

    private static class insertCourse_resultStandardScheme extends StandardScheme<insertCourse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertCourse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertCourse_resultTupleSchemeFactory implements SchemeFactory {
      public insertCourse_resultTupleScheme getScheme() {
        return new insertCourse_resultTupleScheme();
      }
    }

    private static class insertCourse_resultTupleScheme extends TupleScheme<insertCourse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

  }

  public static class updateCourse_args implements org.apache.thrift.TBase<updateCourse_args, updateCourse_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCourse_args");

    private static final org.apache.thrift.protocol.TField COURSE_TO_BE_UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("courseToBeUpdated", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCourse_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCourse_argsTupleSchemeFactory());
    }

    public com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeUpdated; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_TO_BE_UPDATED((short)1, "courseToBeUpdated");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_TO_BE_UPDATED
            return COURSE_TO_BE_UPDATED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_TO_BE_UPDATED, new org.apache.thrift.meta_data.FieldMetaData("courseToBeUpdated", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.inmobi.thriftself.thrift.models.TStudentCourses.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCourse_args.class, metaDataMap);
    }

    public updateCourse_args() {
    }

    public updateCourse_args(
      com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeUpdated)
    {
      this();
      this.courseToBeUpdated = courseToBeUpdated;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCourse_args(updateCourse_args other) {
      if (other.isSetCourseToBeUpdated()) {
        this.courseToBeUpdated = new com.inmobi.thriftself.thrift.models.TStudentCourses(other.courseToBeUpdated);
      }
    }

    public updateCourse_args deepCopy() {
      return new updateCourse_args(this);
    }

    @Override
    public void clear() {
      this.courseToBeUpdated = null;
    }

    public com.inmobi.thriftself.thrift.models.TStudentCourses getCourseToBeUpdated() {
      return this.courseToBeUpdated;
    }

    public updateCourse_args setCourseToBeUpdated(com.inmobi.thriftself.thrift.models.TStudentCourses courseToBeUpdated) {
      this.courseToBeUpdated = courseToBeUpdated;
      return this;
    }

    public void unsetCourseToBeUpdated() {
      this.courseToBeUpdated = null;
    }

    /** Returns true if field courseToBeUpdated is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseToBeUpdated() {
      return this.courseToBeUpdated != null;
    }

    public void setCourseToBeUpdatedIsSet(boolean value) {
      if (!value) {
        this.courseToBeUpdated = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_TO_BE_UPDATED:
        if (value == null) {
          unsetCourseToBeUpdated();
        } else {
          setCourseToBeUpdated((com.inmobi.thriftself.thrift.models.TStudentCourses)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_TO_BE_UPDATED:
        return getCourseToBeUpdated();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_TO_BE_UPDATED:
        return isSetCourseToBeUpdated();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCourse_args)
        return this.equals((updateCourse_args)that);
      return false;
    }

    public boolean equals(updateCourse_args that) {
      if (that == null)
        return false;

      boolean this_present_courseToBeUpdated = true && this.isSetCourseToBeUpdated();
      boolean that_present_courseToBeUpdated = true && that.isSetCourseToBeUpdated();
      if (this_present_courseToBeUpdated || that_present_courseToBeUpdated) {
        if (!(this_present_courseToBeUpdated && that_present_courseToBeUpdated))
          return false;
        if (!this.courseToBeUpdated.equals(that.courseToBeUpdated))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateCourse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateCourse_args typedOther = (updateCourse_args)other;

      lastComparison = Boolean.valueOf(isSetCourseToBeUpdated()).compareTo(typedOther.isSetCourseToBeUpdated());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseToBeUpdated()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseToBeUpdated, typedOther.courseToBeUpdated);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCourse_args(");
      boolean first = true;

      sb.append("courseToBeUpdated:");
      if (this.courseToBeUpdated == null) {
        sb.append("null");
      } else {
        sb.append(this.courseToBeUpdated);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (courseToBeUpdated == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'courseToBeUpdated' was not present! Struct: " + toString());
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCourse_argsStandardSchemeFactory implements SchemeFactory {
      public updateCourse_argsStandardScheme getScheme() {
        return new updateCourse_argsStandardScheme();
      }
    }

    private static class updateCourse_argsStandardScheme extends StandardScheme<updateCourse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_TO_BE_UPDATED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.courseToBeUpdated = new com.inmobi.thriftself.thrift.models.TStudentCourses();
                struct.courseToBeUpdated.read(iprot);
                struct.setCourseToBeUpdatedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCourse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.courseToBeUpdated != null) {
          oprot.writeFieldBegin(COURSE_TO_BE_UPDATED_FIELD_DESC);
          struct.courseToBeUpdated.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCourse_argsTupleSchemeFactory implements SchemeFactory {
      public updateCourse_argsTupleScheme getScheme() {
        return new updateCourse_argsTupleScheme();
      }
    }

    private static class updateCourse_argsTupleScheme extends TupleScheme<updateCourse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.courseToBeUpdated.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.courseToBeUpdated = new com.inmobi.thriftself.thrift.models.TStudentCourses();
        struct.courseToBeUpdated.read(iprot);
        struct.setCourseToBeUpdatedIsSet(true);
      }
    }

  }

  public static class updateCourse_result implements org.apache.thrift.TBase<updateCourse_result, updateCourse_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCourse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCourse_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCourse_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public com.inmobi.thriftself.thrift.models.TInternalServerException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCourse_result.class, metaDataMap);
    }

    public updateCourse_result() {
    }

    public updateCourse_result(
      boolean success,
      com.inmobi.thriftself.thrift.models.TInternalServerException ise)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCourse_result(updateCourse_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetIse()) {
        this.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException(other.ise);
      }
    }

    public updateCourse_result deepCopy() {
      return new updateCourse_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ise = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateCourse_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public com.inmobi.thriftself.thrift.models.TInternalServerException getIse() {
      return this.ise;
    }

    public updateCourse_result setIse(com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((com.inmobi.thriftself.thrift.models.TInternalServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case ISE:
        return getIse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCourse_result)
        return this.equals((updateCourse_result)that);
      return false;
    }

    public boolean equals(updateCourse_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateCourse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateCourse_result typedOther = (updateCourse_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIse()).compareTo(typedOther.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, typedOther.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCourse_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCourse_resultStandardSchemeFactory implements SchemeFactory {
      public updateCourse_resultStandardScheme getScheme() {
        return new updateCourse_resultStandardScheme();
      }
    }

    private static class updateCourse_resultStandardScheme extends StandardScheme<updateCourse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCourse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCourse_resultTupleSchemeFactory implements SchemeFactory {
      public updateCourse_resultTupleScheme getScheme() {
        return new updateCourse_resultTupleScheme();
      }
    }

    private static class updateCourse_resultTupleScheme extends TupleScheme<updateCourse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

  }

  public static class fetchCourse_args implements org.apache.thrift.TBase<fetchCourse_args, fetchCourse_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchCourse_args");

    private static final org.apache.thrift.protocol.TField COURSE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("courseIndex", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchCourse_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchCourse_argsTupleSchemeFactory());
    }

    public int courseIndex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_INDEX((short)1, "courseIndex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_INDEX
            return COURSE_INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COURSEINDEX_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("courseIndex", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchCourse_args.class, metaDataMap);
    }

    public fetchCourse_args() {
    }

    public fetchCourse_args(
      int courseIndex)
    {
      this();
      this.courseIndex = courseIndex;
      setCourseIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchCourse_args(fetchCourse_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.courseIndex = other.courseIndex;
    }

    public fetchCourse_args deepCopy() {
      return new fetchCourse_args(this);
    }

    @Override
    public void clear() {
      setCourseIndexIsSet(false);
      this.courseIndex = 0;
    }

    public int getCourseIndex() {
      return this.courseIndex;
    }

    public fetchCourse_args setCourseIndex(int courseIndex) {
      this.courseIndex = courseIndex;
      setCourseIndexIsSet(true);
      return this;
    }

    public void unsetCourseIndex() {
      __isset_bit_vector.clear(__COURSEINDEX_ISSET_ID);
    }

    /** Returns true if field courseIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseIndex() {
      return __isset_bit_vector.get(__COURSEINDEX_ISSET_ID);
    }

    public void setCourseIndexIsSet(boolean value) {
      __isset_bit_vector.set(__COURSEINDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COURSE_INDEX:
        if (value == null) {
          unsetCourseIndex();
        } else {
          setCourseIndex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_INDEX:
        return Integer.valueOf(getCourseIndex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COURSE_INDEX:
        return isSetCourseIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchCourse_args)
        return this.equals((fetchCourse_args)that);
      return false;
    }

    public boolean equals(fetchCourse_args that) {
      if (that == null)
        return false;

      boolean this_present_courseIndex = true;
      boolean that_present_courseIndex = true;
      if (this_present_courseIndex || that_present_courseIndex) {
        if (!(this_present_courseIndex && that_present_courseIndex))
          return false;
        if (this.courseIndex != that.courseIndex)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchCourse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchCourse_args typedOther = (fetchCourse_args)other;

      lastComparison = Boolean.valueOf(isSetCourseIndex()).compareTo(typedOther.isSetCourseIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseIndex, typedOther.courseIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchCourse_args(");
      boolean first = true;

      sb.append("courseIndex:");
      sb.append(this.courseIndex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'courseIndex' because it's a primitive and you chose the non-beans generator.
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchCourse_argsStandardSchemeFactory implements SchemeFactory {
      public fetchCourse_argsStandardScheme getScheme() {
        return new fetchCourse_argsStandardScheme();
      }
    }

    private static class fetchCourse_argsStandardScheme extends StandardScheme<fetchCourse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.courseIndex = iprot.readI32();
                struct.setCourseIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetCourseIndex()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'courseIndex' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchCourse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COURSE_INDEX_FIELD_DESC);
        oprot.writeI32(struct.courseIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchCourse_argsTupleSchemeFactory implements SchemeFactory {
      public fetchCourse_argsTupleScheme getScheme() {
        return new fetchCourse_argsTupleScheme();
      }
    }

    private static class fetchCourse_argsTupleScheme extends TupleScheme<fetchCourse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI32(struct.courseIndex);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchCourse_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.courseIndex = iprot.readI32();
        struct.setCourseIndexIsSet(true);
      }
    }

  }

  public static class fetchCourse_result implements org.apache.thrift.TBase<fetchCourse_result, fetchCourse_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchCourse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchCourse_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchCourse_resultTupleSchemeFactory());
    }

    public com.inmobi.thriftself.thrift.models.TStudentCourses success; // required
    public com.inmobi.thriftself.thrift.models.TInternalServerException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.inmobi.thriftself.thrift.models.TStudentCourses.class)));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchCourse_result.class, metaDataMap);
    }

    public fetchCourse_result() {
    }

    public fetchCourse_result(
      com.inmobi.thriftself.thrift.models.TStudentCourses success,
      com.inmobi.thriftself.thrift.models.TInternalServerException ise)
    {
      this();
      this.success = success;
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchCourse_result(fetchCourse_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.inmobi.thriftself.thrift.models.TStudentCourses(other.success);
      }
      if (other.isSetIse()) {
        this.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException(other.ise);
      }
    }

    public fetchCourse_result deepCopy() {
      return new fetchCourse_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ise = null;
    }

    public com.inmobi.thriftself.thrift.models.TStudentCourses getSuccess() {
      return this.success;
    }

    public fetchCourse_result setSuccess(com.inmobi.thriftself.thrift.models.TStudentCourses success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.inmobi.thriftself.thrift.models.TInternalServerException getIse() {
      return this.ise;
    }

    public fetchCourse_result setIse(com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.inmobi.thriftself.thrift.models.TStudentCourses)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((com.inmobi.thriftself.thrift.models.TInternalServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ISE:
        return getIse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchCourse_result)
        return this.equals((fetchCourse_result)that);
      return false;
    }

    public boolean equals(fetchCourse_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchCourse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchCourse_result typedOther = (fetchCourse_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIse()).compareTo(typedOther.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, typedOther.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchCourse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchCourse_resultStandardSchemeFactory implements SchemeFactory {
      public fetchCourse_resultStandardScheme getScheme() {
        return new fetchCourse_resultStandardScheme();
      }
    }

    private static class fetchCourse_resultStandardScheme extends StandardScheme<fetchCourse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.inmobi.thriftself.thrift.models.TStudentCourses();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchCourse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchCourse_resultTupleSchemeFactory implements SchemeFactory {
      public fetchCourse_resultTupleScheme getScheme() {
        return new fetchCourse_resultTupleScheme();
      }
    }

    private static class fetchCourse_resultTupleScheme extends TupleScheme<fetchCourse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchCourse_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.inmobi.thriftself.thrift.models.TStudentCourses();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

  }

  public static class fetchStudents_args implements org.apache.thrift.TBase<fetchStudents_args, fetchStudents_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchStudents_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchStudents_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchStudents_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchStudents_args.class, metaDataMap);
    }

    public fetchStudents_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchStudents_args(fetchStudents_args other) {
    }

    public fetchStudents_args deepCopy() {
      return new fetchStudents_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchStudents_args)
        return this.equals((fetchStudents_args)that);
      return false;
    }

    public boolean equals(fetchStudents_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchStudents_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchStudents_args typedOther = (fetchStudents_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchStudents_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchStudents_argsStandardSchemeFactory implements SchemeFactory {
      public fetchStudents_argsStandardScheme getScheme() {
        return new fetchStudents_argsStandardScheme();
      }
    }

    private static class fetchStudents_argsStandardScheme extends StandardScheme<fetchStudents_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchStudents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchStudents_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchStudents_argsTupleSchemeFactory implements SchemeFactory {
      public fetchStudents_argsTupleScheme getScheme() {
        return new fetchStudents_argsTupleScheme();
      }
    }

    private static class fetchStudents_argsTupleScheme extends TupleScheme<fetchStudents_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchStudents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchStudents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class fetchStudents_result implements org.apache.thrift.TBase<fetchStudents_result, fetchStudents_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchStudents_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchStudents_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchStudents_resultTupleSchemeFactory());
    }

    public List<com.inmobi.thriftself.thrift.models.TStudent> success; // required
    public com.inmobi.thriftself.thrift.models.TInternalServerException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.inmobi.thriftself.thrift.models.TStudent.class))));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchStudents_result.class, metaDataMap);
    }

    public fetchStudents_result() {
    }

    public fetchStudents_result(
      List<com.inmobi.thriftself.thrift.models.TStudent> success,
      com.inmobi.thriftself.thrift.models.TInternalServerException ise)
    {
      this();
      this.success = success;
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchStudents_result(fetchStudents_result other) {
      if (other.isSetSuccess()) {
        List<com.inmobi.thriftself.thrift.models.TStudent> __this__success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudent>();
        for (com.inmobi.thriftself.thrift.models.TStudent other_element : other.success) {
          __this__success.add(new com.inmobi.thriftself.thrift.models.TStudent(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIse()) {
        this.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException(other.ise);
      }
    }

    public fetchStudents_result deepCopy() {
      return new fetchStudents_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ise = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.inmobi.thriftself.thrift.models.TStudent> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.inmobi.thriftself.thrift.models.TStudent elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudent>();
      }
      this.success.add(elem);
    }

    public List<com.inmobi.thriftself.thrift.models.TStudent> getSuccess() {
      return this.success;
    }

    public fetchStudents_result setSuccess(List<com.inmobi.thriftself.thrift.models.TStudent> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.inmobi.thriftself.thrift.models.TInternalServerException getIse() {
      return this.ise;
    }

    public fetchStudents_result setIse(com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.inmobi.thriftself.thrift.models.TStudent>)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((com.inmobi.thriftself.thrift.models.TInternalServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ISE:
        return getIse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchStudents_result)
        return this.equals((fetchStudents_result)that);
      return false;
    }

    public boolean equals(fetchStudents_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchStudents_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchStudents_result typedOther = (fetchStudents_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIse()).compareTo(typedOther.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, typedOther.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchStudents_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchStudents_resultStandardSchemeFactory implements SchemeFactory {
      public fetchStudents_resultStandardScheme getScheme() {
        return new fetchStudents_resultStandardScheme();
      }
    }

    private static class fetchStudents_resultStandardScheme extends StandardScheme<fetchStudents_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchStudents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudent>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    com.inmobi.thriftself.thrift.models.TStudent _elem2; // required
                    _elem2 = new com.inmobi.thriftself.thrift.models.TStudent();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchStudents_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.inmobi.thriftself.thrift.models.TStudent _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchStudents_resultTupleSchemeFactory implements SchemeFactory {
      public fetchStudents_resultTupleScheme getScheme() {
        return new fetchStudents_resultTupleScheme();
      }
    }

    private static class fetchStudents_resultTupleScheme extends TupleScheme<fetchStudents_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchStudents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.inmobi.thriftself.thrift.models.TStudent _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchStudents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudent>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              com.inmobi.thriftself.thrift.models.TStudent _elem7; // required
              _elem7 = new com.inmobi.thriftself.thrift.models.TStudent();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

  }

  public static class fetchStudentsByName_args implements org.apache.thrift.TBase<fetchStudentsByName_args, fetchStudentsByName_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchStudentsByName_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchStudentsByName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchStudentsByName_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchStudentsByName_args.class, metaDataMap);
    }

    public fetchStudentsByName_args() {
    }

    public fetchStudentsByName_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchStudentsByName_args(fetchStudentsByName_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public fetchStudentsByName_args deepCopy() {
      return new fetchStudentsByName_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public fetchStudentsByName_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchStudentsByName_args)
        return this.equals((fetchStudentsByName_args)that);
      return false;
    }

    public boolean equals(fetchStudentsByName_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchStudentsByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchStudentsByName_args typedOther = (fetchStudentsByName_args)other;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchStudentsByName_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchStudentsByName_argsStandardSchemeFactory implements SchemeFactory {
      public fetchStudentsByName_argsStandardScheme getScheme() {
        return new fetchStudentsByName_argsStandardScheme();
      }
    }

    private static class fetchStudentsByName_argsStandardScheme extends StandardScheme<fetchStudentsByName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchStudentsByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchStudentsByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchStudentsByName_argsTupleSchemeFactory implements SchemeFactory {
      public fetchStudentsByName_argsTupleScheme getScheme() {
        return new fetchStudentsByName_argsTupleScheme();
      }
    }

    private static class fetchStudentsByName_argsTupleScheme extends TupleScheme<fetchStudentsByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchStudentsByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchStudentsByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
    }

  }

  public static class fetchStudentsByName_result implements org.apache.thrift.TBase<fetchStudentsByName_result, fetchStudentsByName_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchStudentsByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchStudentsByName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchStudentsByName_resultTupleSchemeFactory());
    }

    public List<com.inmobi.thriftself.thrift.models.TStudent> success; // required
    public com.inmobi.thriftself.thrift.models.TInternalServerException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.inmobi.thriftself.thrift.models.TStudent.class))));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchStudentsByName_result.class, metaDataMap);
    }

    public fetchStudentsByName_result() {
    }

    public fetchStudentsByName_result(
      List<com.inmobi.thriftself.thrift.models.TStudent> success,
      com.inmobi.thriftself.thrift.models.TInternalServerException ise)
    {
      this();
      this.success = success;
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchStudentsByName_result(fetchStudentsByName_result other) {
      if (other.isSetSuccess()) {
        List<com.inmobi.thriftself.thrift.models.TStudent> __this__success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudent>();
        for (com.inmobi.thriftself.thrift.models.TStudent other_element : other.success) {
          __this__success.add(new com.inmobi.thriftself.thrift.models.TStudent(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIse()) {
        this.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException(other.ise);
      }
    }

    public fetchStudentsByName_result deepCopy() {
      return new fetchStudentsByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ise = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.inmobi.thriftself.thrift.models.TStudent> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.inmobi.thriftself.thrift.models.TStudent elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudent>();
      }
      this.success.add(elem);
    }

    public List<com.inmobi.thriftself.thrift.models.TStudent> getSuccess() {
      return this.success;
    }

    public fetchStudentsByName_result setSuccess(List<com.inmobi.thriftself.thrift.models.TStudent> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.inmobi.thriftself.thrift.models.TInternalServerException getIse() {
      return this.ise;
    }

    public fetchStudentsByName_result setIse(com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.inmobi.thriftself.thrift.models.TStudent>)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((com.inmobi.thriftself.thrift.models.TInternalServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ISE:
        return getIse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchStudentsByName_result)
        return this.equals((fetchStudentsByName_result)that);
      return false;
    }

    public boolean equals(fetchStudentsByName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchStudentsByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchStudentsByName_result typedOther = (fetchStudentsByName_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIse()).compareTo(typedOther.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, typedOther.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchStudentsByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchStudentsByName_resultStandardSchemeFactory implements SchemeFactory {
      public fetchStudentsByName_resultStandardScheme getScheme() {
        return new fetchStudentsByName_resultStandardScheme();
      }
    }

    private static class fetchStudentsByName_resultStandardScheme extends StandardScheme<fetchStudentsByName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchStudentsByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudent>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    com.inmobi.thriftself.thrift.models.TStudent _elem10; // required
                    _elem10 = new com.inmobi.thriftself.thrift.models.TStudent();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchStudentsByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.inmobi.thriftself.thrift.models.TStudent _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchStudentsByName_resultTupleSchemeFactory implements SchemeFactory {
      public fetchStudentsByName_resultTupleScheme getScheme() {
        return new fetchStudentsByName_resultTupleScheme();
      }
    }

    private static class fetchStudentsByName_resultTupleScheme extends TupleScheme<fetchStudentsByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchStudentsByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.inmobi.thriftself.thrift.models.TStudent _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchStudentsByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudent>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              com.inmobi.thriftself.thrift.models.TStudent _elem15; // required
              _elem15 = new com.inmobi.thriftself.thrift.models.TStudent();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

  }

  public static class fetchStudentsByDepartment_args implements org.apache.thrift.TBase<fetchStudentsByDepartment_args, fetchStudentsByDepartment_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchStudentsByDepartment_args");

    private static final org.apache.thrift.protocol.TField DEPARTMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("departmentName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchStudentsByDepartment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchStudentsByDepartment_argsTupleSchemeFactory());
    }

    public String departmentName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEPARTMENT_NAME((short)1, "departmentName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEPARTMENT_NAME
            return DEPARTMENT_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEPARTMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("departmentName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchStudentsByDepartment_args.class, metaDataMap);
    }

    public fetchStudentsByDepartment_args() {
    }

    public fetchStudentsByDepartment_args(
      String departmentName)
    {
      this();
      this.departmentName = departmentName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchStudentsByDepartment_args(fetchStudentsByDepartment_args other) {
      if (other.isSetDepartmentName()) {
        this.departmentName = other.departmentName;
      }
    }

    public fetchStudentsByDepartment_args deepCopy() {
      return new fetchStudentsByDepartment_args(this);
    }

    @Override
    public void clear() {
      this.departmentName = null;
    }

    public String getDepartmentName() {
      return this.departmentName;
    }

    public fetchStudentsByDepartment_args setDepartmentName(String departmentName) {
      this.departmentName = departmentName;
      return this;
    }

    public void unsetDepartmentName() {
      this.departmentName = null;
    }

    /** Returns true if field departmentName is set (has been assigned a value) and false otherwise */
    public boolean isSetDepartmentName() {
      return this.departmentName != null;
    }

    public void setDepartmentNameIsSet(boolean value) {
      if (!value) {
        this.departmentName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEPARTMENT_NAME:
        if (value == null) {
          unsetDepartmentName();
        } else {
          setDepartmentName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEPARTMENT_NAME:
        return getDepartmentName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEPARTMENT_NAME:
        return isSetDepartmentName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchStudentsByDepartment_args)
        return this.equals((fetchStudentsByDepartment_args)that);
      return false;
    }

    public boolean equals(fetchStudentsByDepartment_args that) {
      if (that == null)
        return false;

      boolean this_present_departmentName = true && this.isSetDepartmentName();
      boolean that_present_departmentName = true && that.isSetDepartmentName();
      if (this_present_departmentName || that_present_departmentName) {
        if (!(this_present_departmentName && that_present_departmentName))
          return false;
        if (!this.departmentName.equals(that.departmentName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchStudentsByDepartment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchStudentsByDepartment_args typedOther = (fetchStudentsByDepartment_args)other;

      lastComparison = Boolean.valueOf(isSetDepartmentName()).compareTo(typedOther.isSetDepartmentName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDepartmentName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departmentName, typedOther.departmentName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchStudentsByDepartment_args(");
      boolean first = true;

      sb.append("departmentName:");
      if (this.departmentName == null) {
        sb.append("null");
      } else {
        sb.append(this.departmentName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (departmentName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'departmentName' was not present! Struct: " + toString());
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchStudentsByDepartment_argsStandardSchemeFactory implements SchemeFactory {
      public fetchStudentsByDepartment_argsStandardScheme getScheme() {
        return new fetchStudentsByDepartment_argsStandardScheme();
      }
    }

    private static class fetchStudentsByDepartment_argsStandardScheme extends StandardScheme<fetchStudentsByDepartment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchStudentsByDepartment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEPARTMENT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.departmentName = iprot.readString();
                struct.setDepartmentNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchStudentsByDepartment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.departmentName != null) {
          oprot.writeFieldBegin(DEPARTMENT_NAME_FIELD_DESC);
          oprot.writeString(struct.departmentName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchStudentsByDepartment_argsTupleSchemeFactory implements SchemeFactory {
      public fetchStudentsByDepartment_argsTupleScheme getScheme() {
        return new fetchStudentsByDepartment_argsTupleScheme();
      }
    }

    private static class fetchStudentsByDepartment_argsTupleScheme extends TupleScheme<fetchStudentsByDepartment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchStudentsByDepartment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.departmentName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchStudentsByDepartment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.departmentName = iprot.readString();
        struct.setDepartmentNameIsSet(true);
      }
    }

  }

  public static class fetchStudentsByDepartment_result implements org.apache.thrift.TBase<fetchStudentsByDepartment_result, fetchStudentsByDepartment_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchStudentsByDepartment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchStudentsByDepartment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchStudentsByDepartment_resultTupleSchemeFactory());
    }

    public List<com.inmobi.thriftself.thrift.models.TStudent> success; // required
    public com.inmobi.thriftself.thrift.models.TInternalServerException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.inmobi.thriftself.thrift.models.TStudent.class))));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchStudentsByDepartment_result.class, metaDataMap);
    }

    public fetchStudentsByDepartment_result() {
    }

    public fetchStudentsByDepartment_result(
      List<com.inmobi.thriftself.thrift.models.TStudent> success,
      com.inmobi.thriftself.thrift.models.TInternalServerException ise)
    {
      this();
      this.success = success;
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchStudentsByDepartment_result(fetchStudentsByDepartment_result other) {
      if (other.isSetSuccess()) {
        List<com.inmobi.thriftself.thrift.models.TStudent> __this__success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudent>();
        for (com.inmobi.thriftself.thrift.models.TStudent other_element : other.success) {
          __this__success.add(new com.inmobi.thriftself.thrift.models.TStudent(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIse()) {
        this.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException(other.ise);
      }
    }

    public fetchStudentsByDepartment_result deepCopy() {
      return new fetchStudentsByDepartment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ise = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.inmobi.thriftself.thrift.models.TStudent> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.inmobi.thriftself.thrift.models.TStudent elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudent>();
      }
      this.success.add(elem);
    }

    public List<com.inmobi.thriftself.thrift.models.TStudent> getSuccess() {
      return this.success;
    }

    public fetchStudentsByDepartment_result setSuccess(List<com.inmobi.thriftself.thrift.models.TStudent> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.inmobi.thriftself.thrift.models.TInternalServerException getIse() {
      return this.ise;
    }

    public fetchStudentsByDepartment_result setIse(com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.inmobi.thriftself.thrift.models.TStudent>)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((com.inmobi.thriftself.thrift.models.TInternalServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ISE:
        return getIse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchStudentsByDepartment_result)
        return this.equals((fetchStudentsByDepartment_result)that);
      return false;
    }

    public boolean equals(fetchStudentsByDepartment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchStudentsByDepartment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchStudentsByDepartment_result typedOther = (fetchStudentsByDepartment_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIse()).compareTo(typedOther.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, typedOther.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchStudentsByDepartment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchStudentsByDepartment_resultStandardSchemeFactory implements SchemeFactory {
      public fetchStudentsByDepartment_resultStandardScheme getScheme() {
        return new fetchStudentsByDepartment_resultStandardScheme();
      }
    }

    private static class fetchStudentsByDepartment_resultStandardScheme extends StandardScheme<fetchStudentsByDepartment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchStudentsByDepartment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudent>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    com.inmobi.thriftself.thrift.models.TStudent _elem18; // required
                    _elem18 = new com.inmobi.thriftself.thrift.models.TStudent();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchStudentsByDepartment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.inmobi.thriftself.thrift.models.TStudent _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchStudentsByDepartment_resultTupleSchemeFactory implements SchemeFactory {
      public fetchStudentsByDepartment_resultTupleScheme getScheme() {
        return new fetchStudentsByDepartment_resultTupleScheme();
      }
    }

    private static class fetchStudentsByDepartment_resultTupleScheme extends TupleScheme<fetchStudentsByDepartment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchStudentsByDepartment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.inmobi.thriftself.thrift.models.TStudent _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchStudentsByDepartment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudent>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              com.inmobi.thriftself.thrift.models.TStudent _elem23; // required
              _elem23 = new com.inmobi.thriftself.thrift.models.TStudent();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

  }

  public static class fetchCourses_args implements org.apache.thrift.TBase<fetchCourses_args, fetchCourses_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchCourses_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchCourses_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchCourses_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchCourses_args.class, metaDataMap);
    }

    public fetchCourses_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchCourses_args(fetchCourses_args other) {
    }

    public fetchCourses_args deepCopy() {
      return new fetchCourses_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchCourses_args)
        return this.equals((fetchCourses_args)that);
      return false;
    }

    public boolean equals(fetchCourses_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchCourses_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchCourses_args typedOther = (fetchCourses_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchCourses_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchCourses_argsStandardSchemeFactory implements SchemeFactory {
      public fetchCourses_argsStandardScheme getScheme() {
        return new fetchCourses_argsStandardScheme();
      }
    }

    private static class fetchCourses_argsStandardScheme extends StandardScheme<fetchCourses_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchCourses_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchCourses_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchCourses_argsTupleSchemeFactory implements SchemeFactory {
      public fetchCourses_argsTupleScheme getScheme() {
        return new fetchCourses_argsTupleScheme();
      }
    }

    private static class fetchCourses_argsTupleScheme extends TupleScheme<fetchCourses_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchCourses_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchCourses_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class fetchCourses_result implements org.apache.thrift.TBase<fetchCourses_result, fetchCourses_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchCourses_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchCourses_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchCourses_resultTupleSchemeFactory());
    }

    public List<com.inmobi.thriftself.thrift.models.TStudentCourses> success; // required
    public com.inmobi.thriftself.thrift.models.TInternalServerException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.inmobi.thriftself.thrift.models.TStudentCourses.class))));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchCourses_result.class, metaDataMap);
    }

    public fetchCourses_result() {
    }

    public fetchCourses_result(
      List<com.inmobi.thriftself.thrift.models.TStudentCourses> success,
      com.inmobi.thriftself.thrift.models.TInternalServerException ise)
    {
      this();
      this.success = success;
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchCourses_result(fetchCourses_result other) {
      if (other.isSetSuccess()) {
        List<com.inmobi.thriftself.thrift.models.TStudentCourses> __this__success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudentCourses>();
        for (com.inmobi.thriftself.thrift.models.TStudentCourses other_element : other.success) {
          __this__success.add(new com.inmobi.thriftself.thrift.models.TStudentCourses(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIse()) {
        this.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException(other.ise);
      }
    }

    public fetchCourses_result deepCopy() {
      return new fetchCourses_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ise = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.inmobi.thriftself.thrift.models.TStudentCourses> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.inmobi.thriftself.thrift.models.TStudentCourses elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudentCourses>();
      }
      this.success.add(elem);
    }

    public List<com.inmobi.thriftself.thrift.models.TStudentCourses> getSuccess() {
      return this.success;
    }

    public fetchCourses_result setSuccess(List<com.inmobi.thriftself.thrift.models.TStudentCourses> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.inmobi.thriftself.thrift.models.TInternalServerException getIse() {
      return this.ise;
    }

    public fetchCourses_result setIse(com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.inmobi.thriftself.thrift.models.TStudentCourses>)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((com.inmobi.thriftself.thrift.models.TInternalServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ISE:
        return getIse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchCourses_result)
        return this.equals((fetchCourses_result)that);
      return false;
    }

    public boolean equals(fetchCourses_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchCourses_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchCourses_result typedOther = (fetchCourses_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIse()).compareTo(typedOther.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, typedOther.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchCourses_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchCourses_resultStandardSchemeFactory implements SchemeFactory {
      public fetchCourses_resultStandardScheme getScheme() {
        return new fetchCourses_resultStandardScheme();
      }
    }

    private static class fetchCourses_resultStandardScheme extends StandardScheme<fetchCourses_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchCourses_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudentCourses>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    com.inmobi.thriftself.thrift.models.TStudentCourses _elem26; // required
                    _elem26 = new com.inmobi.thriftself.thrift.models.TStudentCourses();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchCourses_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.inmobi.thriftself.thrift.models.TStudentCourses _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchCourses_resultTupleSchemeFactory implements SchemeFactory {
      public fetchCourses_resultTupleScheme getScheme() {
        return new fetchCourses_resultTupleScheme();
      }
    }

    private static class fetchCourses_resultTupleScheme extends TupleScheme<fetchCourses_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchCourses_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.inmobi.thriftself.thrift.models.TStudentCourses _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchCourses_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudentCourses>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              com.inmobi.thriftself.thrift.models.TStudentCourses _elem31; // required
              _elem31 = new com.inmobi.thriftself.thrift.models.TStudentCourses();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

  }

  public static class fetchCoursesByName_args implements org.apache.thrift.TBase<fetchCoursesByName_args, fetchCoursesByName_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchCoursesByName_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchCoursesByName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchCoursesByName_argsTupleSchemeFactory());
    }

    public String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchCoursesByName_args.class, metaDataMap);
    }

    public fetchCoursesByName_args() {
    }

    public fetchCoursesByName_args(
      String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchCoursesByName_args(fetchCoursesByName_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public fetchCoursesByName_args deepCopy() {
      return new fetchCoursesByName_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public String getName() {
      return this.name;
    }

    public fetchCoursesByName_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchCoursesByName_args)
        return this.equals((fetchCoursesByName_args)that);
      return false;
    }

    public boolean equals(fetchCoursesByName_args that) {
      if (that == null)
        return false;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchCoursesByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchCoursesByName_args typedOther = (fetchCoursesByName_args)other;

      lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchCoursesByName_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchCoursesByName_argsStandardSchemeFactory implements SchemeFactory {
      public fetchCoursesByName_argsStandardScheme getScheme() {
        return new fetchCoursesByName_argsStandardScheme();
      }
    }

    private static class fetchCoursesByName_argsStandardScheme extends StandardScheme<fetchCoursesByName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchCoursesByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchCoursesByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchCoursesByName_argsTupleSchemeFactory implements SchemeFactory {
      public fetchCoursesByName_argsTupleScheme getScheme() {
        return new fetchCoursesByName_argsTupleScheme();
      }
    }

    private static class fetchCoursesByName_argsTupleScheme extends TupleScheme<fetchCoursesByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchCoursesByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeString(struct.name);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchCoursesByName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
    }

  }

  public static class fetchCoursesByName_result implements org.apache.thrift.TBase<fetchCoursesByName_result, fetchCoursesByName_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchCoursesByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchCoursesByName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchCoursesByName_resultTupleSchemeFactory());
    }

    public List<com.inmobi.thriftself.thrift.models.TStudentCourses> success; // required
    public com.inmobi.thriftself.thrift.models.TInternalServerException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.inmobi.thriftself.thrift.models.TStudentCourses.class))));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchCoursesByName_result.class, metaDataMap);
    }

    public fetchCoursesByName_result() {
    }

    public fetchCoursesByName_result(
      List<com.inmobi.thriftself.thrift.models.TStudentCourses> success,
      com.inmobi.thriftself.thrift.models.TInternalServerException ise)
    {
      this();
      this.success = success;
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchCoursesByName_result(fetchCoursesByName_result other) {
      if (other.isSetSuccess()) {
        List<com.inmobi.thriftself.thrift.models.TStudentCourses> __this__success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudentCourses>();
        for (com.inmobi.thriftself.thrift.models.TStudentCourses other_element : other.success) {
          __this__success.add(new com.inmobi.thriftself.thrift.models.TStudentCourses(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIse()) {
        this.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException(other.ise);
      }
    }

    public fetchCoursesByName_result deepCopy() {
      return new fetchCoursesByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ise = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.inmobi.thriftself.thrift.models.TStudentCourses> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.inmobi.thriftself.thrift.models.TStudentCourses elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudentCourses>();
      }
      this.success.add(elem);
    }

    public List<com.inmobi.thriftself.thrift.models.TStudentCourses> getSuccess() {
      return this.success;
    }

    public fetchCoursesByName_result setSuccess(List<com.inmobi.thriftself.thrift.models.TStudentCourses> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.inmobi.thriftself.thrift.models.TInternalServerException getIse() {
      return this.ise;
    }

    public fetchCoursesByName_result setIse(com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.inmobi.thriftself.thrift.models.TStudentCourses>)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((com.inmobi.thriftself.thrift.models.TInternalServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ISE:
        return getIse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchCoursesByName_result)
        return this.equals((fetchCoursesByName_result)that);
      return false;
    }

    public boolean equals(fetchCoursesByName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchCoursesByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchCoursesByName_result typedOther = (fetchCoursesByName_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIse()).compareTo(typedOther.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, typedOther.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchCoursesByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchCoursesByName_resultStandardSchemeFactory implements SchemeFactory {
      public fetchCoursesByName_resultStandardScheme getScheme() {
        return new fetchCoursesByName_resultStandardScheme();
      }
    }

    private static class fetchCoursesByName_resultStandardScheme extends StandardScheme<fetchCoursesByName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchCoursesByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudentCourses>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    com.inmobi.thriftself.thrift.models.TStudentCourses _elem34; // required
                    _elem34 = new com.inmobi.thriftself.thrift.models.TStudentCourses();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchCoursesByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.inmobi.thriftself.thrift.models.TStudentCourses _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchCoursesByName_resultTupleSchemeFactory implements SchemeFactory {
      public fetchCoursesByName_resultTupleScheme getScheme() {
        return new fetchCoursesByName_resultTupleScheme();
      }
    }

    private static class fetchCoursesByName_resultTupleScheme extends TupleScheme<fetchCoursesByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchCoursesByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.inmobi.thriftself.thrift.models.TStudentCourses _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchCoursesByName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudentCourses>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              com.inmobi.thriftself.thrift.models.TStudentCourses _elem39; // required
              _elem39 = new com.inmobi.thriftself.thrift.models.TStudentCourses();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

  }

  public static class fetchCoursesBySemester_args implements org.apache.thrift.TBase<fetchCoursesBySemester_args, fetchCoursesBySemester_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchCoursesBySemester_args");

    private static final org.apache.thrift.protocol.TField SEMESTER_FIELD_DESC = new org.apache.thrift.protocol.TField("semester", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchCoursesBySemester_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchCoursesBySemester_argsTupleSchemeFactory());
    }

    public int semester; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEMESTER((short)1, "semester");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEMESTER
            return SEMESTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SEMESTER_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEMESTER, new org.apache.thrift.meta_data.FieldMetaData("semester", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchCoursesBySemester_args.class, metaDataMap);
    }

    public fetchCoursesBySemester_args() {
    }

    public fetchCoursesBySemester_args(
      int semester)
    {
      this();
      this.semester = semester;
      setSemesterIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchCoursesBySemester_args(fetchCoursesBySemester_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.semester = other.semester;
    }

    public fetchCoursesBySemester_args deepCopy() {
      return new fetchCoursesBySemester_args(this);
    }

    @Override
    public void clear() {
      setSemesterIsSet(false);
      this.semester = 0;
    }

    public int getSemester() {
      return this.semester;
    }

    public fetchCoursesBySemester_args setSemester(int semester) {
      this.semester = semester;
      setSemesterIsSet(true);
      return this;
    }

    public void unsetSemester() {
      __isset_bit_vector.clear(__SEMESTER_ISSET_ID);
    }

    /** Returns true if field semester is set (has been assigned a value) and false otherwise */
    public boolean isSetSemester() {
      return __isset_bit_vector.get(__SEMESTER_ISSET_ID);
    }

    public void setSemesterIsSet(boolean value) {
      __isset_bit_vector.set(__SEMESTER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEMESTER:
        if (value == null) {
          unsetSemester();
        } else {
          setSemester((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEMESTER:
        return Integer.valueOf(getSemester());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEMESTER:
        return isSetSemester();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchCoursesBySemester_args)
        return this.equals((fetchCoursesBySemester_args)that);
      return false;
    }

    public boolean equals(fetchCoursesBySemester_args that) {
      if (that == null)
        return false;

      boolean this_present_semester = true;
      boolean that_present_semester = true;
      if (this_present_semester || that_present_semester) {
        if (!(this_present_semester && that_present_semester))
          return false;
        if (this.semester != that.semester)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchCoursesBySemester_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchCoursesBySemester_args typedOther = (fetchCoursesBySemester_args)other;

      lastComparison = Boolean.valueOf(isSetSemester()).compareTo(typedOther.isSetSemester());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSemester()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.semester, typedOther.semester);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchCoursesBySemester_args(");
      boolean first = true;

      sb.append("semester:");
      sb.append(this.semester);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // alas, we cannot check 'semester' because it's a primitive and you chose the non-beans generator.
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchCoursesBySemester_argsStandardSchemeFactory implements SchemeFactory {
      public fetchCoursesBySemester_argsStandardScheme getScheme() {
        return new fetchCoursesBySemester_argsStandardScheme();
      }
    }

    private static class fetchCoursesBySemester_argsStandardScheme extends StandardScheme<fetchCoursesBySemester_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchCoursesBySemester_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEMESTER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.semester = iprot.readI32();
                struct.setSemesterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetSemester()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'semester' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchCoursesBySemester_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SEMESTER_FIELD_DESC);
        oprot.writeI32(struct.semester);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchCoursesBySemester_argsTupleSchemeFactory implements SchemeFactory {
      public fetchCoursesBySemester_argsTupleScheme getScheme() {
        return new fetchCoursesBySemester_argsTupleScheme();
      }
    }

    private static class fetchCoursesBySemester_argsTupleScheme extends TupleScheme<fetchCoursesBySemester_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchCoursesBySemester_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeI32(struct.semester);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchCoursesBySemester_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.semester = iprot.readI32();
        struct.setSemesterIsSet(true);
      }
    }

  }

  public static class fetchCoursesBySemester_result implements org.apache.thrift.TBase<fetchCoursesBySemester_result, fetchCoursesBySemester_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchCoursesBySemester_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ISE_FIELD_DESC = new org.apache.thrift.protocol.TField("ise", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new fetchCoursesBySemester_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new fetchCoursesBySemester_resultTupleSchemeFactory());
    }

    public List<com.inmobi.thriftself.thrift.models.TStudentCourses> success; // required
    public com.inmobi.thriftself.thrift.models.TInternalServerException ise; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ISE((short)1, "ise");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ISE
            return ISE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.inmobi.thriftself.thrift.models.TStudentCourses.class))));
      tmpMap.put(_Fields.ISE, new org.apache.thrift.meta_data.FieldMetaData("ise", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchCoursesBySemester_result.class, metaDataMap);
    }

    public fetchCoursesBySemester_result() {
    }

    public fetchCoursesBySemester_result(
      List<com.inmobi.thriftself.thrift.models.TStudentCourses> success,
      com.inmobi.thriftself.thrift.models.TInternalServerException ise)
    {
      this();
      this.success = success;
      this.ise = ise;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchCoursesBySemester_result(fetchCoursesBySemester_result other) {
      if (other.isSetSuccess()) {
        List<com.inmobi.thriftself.thrift.models.TStudentCourses> __this__success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudentCourses>();
        for (com.inmobi.thriftself.thrift.models.TStudentCourses other_element : other.success) {
          __this__success.add(new com.inmobi.thriftself.thrift.models.TStudentCourses(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetIse()) {
        this.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException(other.ise);
      }
    }

    public fetchCoursesBySemester_result deepCopy() {
      return new fetchCoursesBySemester_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ise = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.inmobi.thriftself.thrift.models.TStudentCourses> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.inmobi.thriftself.thrift.models.TStudentCourses elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudentCourses>();
      }
      this.success.add(elem);
    }

    public List<com.inmobi.thriftself.thrift.models.TStudentCourses> getSuccess() {
      return this.success;
    }

    public fetchCoursesBySemester_result setSuccess(List<com.inmobi.thriftself.thrift.models.TStudentCourses> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.inmobi.thriftself.thrift.models.TInternalServerException getIse() {
      return this.ise;
    }

    public fetchCoursesBySemester_result setIse(com.inmobi.thriftself.thrift.models.TInternalServerException ise) {
      this.ise = ise;
      return this;
    }

    public void unsetIse() {
      this.ise = null;
    }

    /** Returns true if field ise is set (has been assigned a value) and false otherwise */
    public boolean isSetIse() {
      return this.ise != null;
    }

    public void setIseIsSet(boolean value) {
      if (!value) {
        this.ise = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.inmobi.thriftself.thrift.models.TStudentCourses>)value);
        }
        break;

      case ISE:
        if (value == null) {
          unsetIse();
        } else {
          setIse((com.inmobi.thriftself.thrift.models.TInternalServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ISE:
        return getIse();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ISE:
        return isSetIse();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchCoursesBySemester_result)
        return this.equals((fetchCoursesBySemester_result)that);
      return false;
    }

    public boolean equals(fetchCoursesBySemester_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ise = true && this.isSetIse();
      boolean that_present_ise = true && that.isSetIse();
      if (this_present_ise || that_present_ise) {
        if (!(this_present_ise && that_present_ise))
          return false;
        if (!this.ise.equals(that.ise))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(fetchCoursesBySemester_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      fetchCoursesBySemester_result typedOther = (fetchCoursesBySemester_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIse()).compareTo(typedOther.isSetIse());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIse()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ise, typedOther.ise);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("fetchCoursesBySemester_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ise:");
      if (this.ise == null) {
        sb.append("null");
      } else {
        sb.append(this.ise);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchCoursesBySemester_resultStandardSchemeFactory implements SchemeFactory {
      public fetchCoursesBySemester_resultStandardScheme getScheme() {
        return new fetchCoursesBySemester_resultStandardScheme();
      }
    }

    private static class fetchCoursesBySemester_resultStandardScheme extends StandardScheme<fetchCoursesBySemester_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchCoursesBySemester_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudentCourses>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    com.inmobi.thriftself.thrift.models.TStudentCourses _elem42; // required
                    _elem42 = new com.inmobi.thriftself.thrift.models.TStudentCourses();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ISE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
                struct.ise.read(iprot);
                struct.setIseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchCoursesBySemester_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.inmobi.thriftself.thrift.models.TStudentCourses _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ise != null) {
          oprot.writeFieldBegin(ISE_FIELD_DESC);
          struct.ise.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchCoursesBySemester_resultTupleSchemeFactory implements SchemeFactory {
      public fetchCoursesBySemester_resultTupleScheme getScheme() {
        return new fetchCoursesBySemester_resultTupleScheme();
      }
    }

    private static class fetchCoursesBySemester_resultTupleScheme extends TupleScheme<fetchCoursesBySemester_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchCoursesBySemester_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetIse()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.inmobi.thriftself.thrift.models.TStudentCourses _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
        if (struct.isSetIse()) {
          struct.ise.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchCoursesBySemester_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.inmobi.thriftself.thrift.models.TStudentCourses>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              com.inmobi.thriftself.thrift.models.TStudentCourses _elem47; // required
              _elem47 = new com.inmobi.thriftself.thrift.models.TStudentCourses();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ise = new com.inmobi.thriftself.thrift.models.TInternalServerException();
          struct.ise.read(iprot);
          struct.setIseIsSet(true);
        }
      }
    }

  }

}
